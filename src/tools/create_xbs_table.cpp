// Copyright (c) 2018-present Baidu, Inc. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <net/if.h>
#include <sys/ioctl.h>
#include <signal.h>
#include <stdio.h>
#include <string>
#include <Configure.h>
#include <baidu/rpc/server.h>
#include <gflags/gflags.h>
#include "common.h"
#include "schema_factory.h"
#include "meta_server_interact.hpp"
#include "mut_table_key.h"

namespace baikaldb {
DEFINE_string(table_name, "behavior", "table_name");
DEFINE_int32(replica_num, 3, "replica_num");
void create_schema(pb::SchemaInfo& table) 
{
    table.set_region_split_lines(10000000);
    table.set_table_name(FLAGS_table_name);
    table.set_database("TEST");
    table.set_namespace_name("TEST2");
    table.set_resource_tag("qadisk-ct");
    table.set_partition_num(1);
    table.set_replica_num(FLAGS_replica_num);
    pb::FieldInfo* field;

    field = table.add_fields();
    field->set_field_name("query");
    field->set_mysql_type(pb::STRING);

    field = table.add_fields();
    field->set_field_name("cuid");
    field->set_mysql_type(pb::STRING);

    field = table.add_fields();
    field->set_field_name("date");
    field->set_mysql_type(pb::DATE);

    field = table.add_fields();
    field->set_field_name("id");
    field->set_mysql_type(pb::UINT64);

    field = table.add_fields();
    field->set_field_name("province");
    field->set_mysql_type(pb::STRING);

    field = table.add_fields();
    field->set_field_name("city");
    field->set_mysql_type(pb::STRING);

    field = table.add_fields();
    field->set_field_name("pv");
    field->set_mysql_type(pb::UINT32);

    pb::IndexInfo* pk_idx = table.add_indexs();
    pk_idx->set_index_name("priamry_key");
    pk_idx->set_index_type(pb::I_PRIMARY);
    pk_idx->add_field_names("cuid");
    pk_idx->add_field_names("date");
    pk_idx->add_field_names("query");
    pk_idx->add_field_names("id");
    
    pb::IndexInfo* sec_idx = table.add_indexs();
    sec_idx->set_index_name("cuid_key");
    sec_idx->set_index_type(pb::I_KEY);
    sec_idx->add_field_names("query");
    sec_idx->add_field_names("date");
    sec_idx->add_field_names("cuid");

    uint64_t split_keys[] = {0x00FFFFFFFFFFFFFF,0x01FFFFFFFFFFFFFF,0x02FFFFFFFFFFFFFF,0x03FFFFFFFFFFFFFF,0x04FFFFFFFFFFFFFF,0x05FFFFFFFFFFFFFF,0x06FFFFFFFFFFFFFF,0x07FFFFFFFFFFFFFF,0x08FFFFFFFFFFFFFF,0x09FFFFFFFFFFFFFF,0x0AFFFFFFFFFFFFFF,0x0BFFFFFFFFFFFFFF,0x0CFFFFFFFFFFFFFF,0x0DFFFFFFFFFFFFFF,0x0EFFFFFFFFFFFFFF,0x0FFFFFFFFFFFFFFF,0x10FFFFFFFFFFFFFF,0x11FFFFFFFFFFFFFF,0x12FFFFFFFFFFFFFF,0x13FFFFFFFFFFFFFF,0x14FFFFFFFFFFFFFF,0x15FFFFFFFFFFFFFF,0x16FFFFFFFFFFFFFF,0x17FFFFFFFFFFFFFF,0x18FFFFFFFFFFFFFF,0x19FFFFFFFFFFFFFF,0x1AFFFFFFFFFFFFFF,0x1BFFFFFFFFFFFFFF,0x1CFFFFFFFFFFFFFF,0x1DFFFFFFFFFFFFFF,0x1EFFFFFFFFFFFFFF,0x1FFFFFFFFFFFFFFF,0x20FFFFFFFFFFFFFF,0x21FFFFFFFFFFFFFF,0x22FFFFFFFFFFFFFF,0x23FFFFFFFFFFFFFF,0x24FFFFFFFFFFFFFF,0x25FFFFFFFFFFFFFF,0x26FFFFFFFFFFFFFF,0x27FFFFFFFFFFFFFF,0x28FFFFFFFFFFFFFF,0x29FFFFFFFFFFFFFF,0x2AFFFFFFFFFFFFFF,0x2BFFFFFFFFFFFFFF,0x2CFFFFFFFFFFFFFF,0x2DFFFFFFFFFFFFFF,0x2EFFFFFFFFFFFFFF,0x2FFFFFFFFFFFFFFF,0x30FFFFFFFFFFFFFF,0x31FFFFFFFFFFFFFF,0x32FFFFFFFFFFFFFF,0x33FFFFFFFFFFFFFF,0x34FFFFFFFFFFFFFF,0x35FFFFFFFFFFFFFF,0x36FFFFFFFFFFFFFF,0x37FFFFFFFFFFFFFF,0x38FFFFFFFFFFFFFF,0x39FFFFFFFFFFFFFF,0x3AFFFFFFFFFFFFFF,0x3BFFFFFFFFFFFFFF,0x3CFFFFFFFFFFFFFF,0x3DFFFFFFFFFFFFFF,0x3EFFFFFFFFFFFFFF,0x3FFFFFFFFFFFFFFF,0x40FFFFFFFFFFFFFF,0x41FFFFFFFFFFFFFF,0x42FFFFFFFFFFFFFF,0x43FFFFFFFFFFFFFF,0x44FFFFFFFFFFFFFF,0x45FFFFFFFFFFFFFF,0x46FFFFFFFFFFFFFF,0x47FFFFFFFFFFFFFF,0x48FFFFFFFFFFFFFF,0x49FFFFFFFFFFFFFF,0x4AFFFFFFFFFFFFFF,0x4BFFFFFFFFFFFFFF,0x4CFFFFFFFFFFFFFF,0x4DFFFFFFFFFFFFFF,0x4EFFFFFFFFFFFFFF,0x4FFFFFFFFFFFFFFF,0x50FFFFFFFFFFFFFF,0x51FFFFFFFFFFFFFF,0x52FFFFFFFFFFFFFF,0x53FFFFFFFFFFFFFF,0x54FFFFFFFFFFFFFF,0x55FFFFFFFFFFFFFF,0x56FFFFFFFFFFFFFF,0x57FFFFFFFFFFFFFF,0x58FFFFFFFFFFFFFF,0x59FFFFFFFFFFFFFF,0x5AFFFFFFFFFFFFFF,0x5BFFFFFFFFFFFFFF,0x5CFFFFFFFFFFFFFF,0x5DFFFFFFFFFFFFFF,0x5EFFFFFFFFFFFFFF,0x5FFFFFFFFFFFFFFF,0x60FFFFFFFFFFFFFF,0x61FFFFFFFFFFFFFF,0x62FFFFFFFFFFFFFF,0x63FFFFFFFFFFFFFF,0x64FFFFFFFFFFFFFF,0x65FFFFFFFFFFFFFF,0x66FFFFFFFFFFFFFF,0x67FFFFFFFFFFFFFF,0x68FFFFFFFFFFFFFF,0x69FFFFFFFFFFFFFF,0x6AFFFFFFFFFFFFFF,0x6BFFFFFFFFFFFFFF,0x6CFFFFFFFFFFFFFF,0x6DFFFFFFFFFFFFFF,0x6EFFFFFFFFFFFFFF,0x6FFFFFFFFFFFFFFF,0x70FFFFFFFFFFFFFF,0x71FFFFFFFFFFFFFF,0x72FFFFFFFFFFFFFF,0x73FFFFFFFFFFFFFF,0x74FFFFFFFFFFFFFF,0x75FFFFFFFFFFFFFF,0x76FFFFFFFFFFFFFF,0x77FFFFFFFFFFFFFF,0x78FFFFFFFFFFFFFF,0x79FFFFFFFFFFFFFF,0x7AFFFFFFFFFFFFFF,0x7BFFFFFFFFFFFFFF,0x7CFFFFFFFFFFFFFF,0x7DFFFFFFFFFFFFFF,0x7EFFFFFFFFFFFFFF,0x7FFFFFFFFFFFFFFF,0x80FFFFFFFFFFFFFF,0x81FFFFFFFFFFFFFF,0x82FFFFFFFFFFFFFF,0x83FFFFFFFFFFFFFF,0x84FFFFFFFFFFFFFF,0x85FFFFFFFFFFFFFF,0x86FFFFFFFFFFFFFF,0x87FFFFFFFFFFFFFF,0x88FFFFFFFFFFFFFF,0x89FFFFFFFFFFFFFF,0x8AFFFFFFFFFFFFFF,0x8BFFFFFFFFFFFFFF,0x8CFFFFFFFFFFFFFF,0x8DFFFFFFFFFFFFFF,0x8EFFFFFFFFFFFFFF,0x8FFFFFFFFFFFFFFF,0x90FFFFFFFFFFFFFF,0x91FFFFFFFFFFFFFF,0x92FFFFFFFFFFFFFF,0x93FFFFFFFFFFFFFF,0x94FFFFFFFFFFFFFF,0x95FFFFFFFFFFFFFF,0x96FFFFFFFFFFFFFF,0x97FFFFFFFFFFFFFF,0x98FFFFFFFFFFFFFF,0x99FFFFFFFFFFFFFF,0x9AFFFFFFFFFFFFFF,0x9BFFFFFFFFFFFFFF,0x9CFFFFFFFFFFFFFF,0x9DFFFFFFFFFFFFFF,0x9EFFFFFFFFFFFFFF,0x9FFFFFFFFFFFFFFF,0xA0FFFFFFFFFFFFFF,0xA1FFFFFFFFFFFFFF,0xA2FFFFFFFFFFFFFF,0xA3FFFFFFFFFFFFFF,0xA4FFFFFFFFFFFFFF,0xA5FFFFFFFFFFFFFF,0xA6FFFFFFFFFFFFFF,0xA7FFFFFFFFFFFFFF,0xA8FFFFFFFFFFFFFF,0xA9FFFFFFFFFFFFFF,0xAAFFFFFFFFFFFFFF,0xABFFFFFFFFFFFFFF,0xACFFFFFFFFFFFFFF,0xADFFFFFFFFFFFFFF,0xAEFFFFFFFFFFFFFF,0xAFFFFFFFFFFFFFFF,0xB0FFFFFFFFFFFFFF,0xB1FFFFFFFFFFFFFF,0xB2FFFFFFFFFFFFFF,0xB3FFFFFFFFFFFFFF,0xB4FFFFFFFFFFFFFF,0xB5FFFFFFFFFFFFFF,0xB6FFFFFFFFFFFFFF,0xB7FFFFFFFFFFFFFF,0xB8FFFFFFFFFFFFFF,0xB9FFFFFFFFFFFFFF,0xBAFFFFFFFFFFFFFF,0xBBFFFFFFFFFFFFFF,0xBCFFFFFFFFFFFFFF,0xBDFFFFFFFFFFFFFF,0xBEFFFFFFFFFFFFFF,0xBFFFFFFFFFFFFFFF,0xC0FFFFFFFFFFFFFF,0xC1FFFFFFFFFFFFFF,0xC2FFFFFFFFFFFFFF,0xC3FFFFFFFFFFFFFF,0xC4FFFFFFFFFFFFFF,0xC5FFFFFFFFFFFFFF,0xC6FFFFFFFFFFFFFF,0xC7FFFFFFFFFFFFFF,0xC8FFFFFFFFFFFFFF,0xC9FFFFFFFFFFFFFF,0xCAFFFFFFFFFFFFFF,0xCBFFFFFFFFFFFFFF,0xCCFFFFFFFFFFFFFF,0xCDFFFFFFFFFFFFFF,0xCEFFFFFFFFFFFFFF,0xCFFFFFFFFFFFFFFF,0xD0FFFFFFFFFFFFFF,0xD1FFFFFFFFFFFFFF,0xD2FFFFFFFFFFFFFF,0xD3FFFFFFFFFFFFFF,0xD4FFFFFFFFFFFFFF,0xD5FFFFFFFFFFFFFF,0xD6FFFFFFFFFFFFFF,0xD7FFFFFFFFFFFFFF,0xD8FFFFFFFFFFFFFF,0xD9FFFFFFFFFFFFFF,0xDAFFFFFFFFFFFFFF,0xDBFFFFFFFFFFFFFF,0xDCFFFFFFFFFFFFFF,0xDDFFFFFFFFFFFFFF,0xDEFFFFFFFFFFFFFF,0xDFFFFFFFFFFFFFFF,0xE0FFFFFFFFFFFFFF,0xE1FFFFFFFFFFFFFF,0xE2FFFFFFFFFFFFFF,0xE3FFFFFFFFFFFFFF,0xE4FFFFFFFFFFFFFF,0xE5FFFFFFFFFFFFFF,0xE6FFFFFFFFFFFFFF,0xE7FFFFFFFFFFFFFF,0xE8FFFFFFFFFFFFFF,0xE9FFFFFFFFFFFFFF,0xEAFFFFFFFFFFFFFF,0xEBFFFFFFFFFFFFFF,0xECFFFFFFFFFFFFFF,0xEDFFFFFFFFFFFFFF,0xEEFFFFFFFFFFFFFF,0xEFFFFFFFFFFFFFFF,0xF0FFFFFFFFFFFFFF,0xF1FFFFFFFFFFFFFF,0xF2FFFFFFFFFFFFFF,0xF3FFFFFFFFFFFFFF,0xF4FFFFFFFFFFFFFF,0xF5FFFFFFFFFFFFFF,0xF6FFFFFFFFFFFFFF,0xF7FFFFFFFFFFFFFF,0xF8FFFFFFFFFFFFFF,0xF9FFFFFFFFFFFFFF,0xFAFFFFFFFFFFFFFF,0xFBFFFFFFFFFFFFFF,0xFCFFFFFFFFFFFFFF,0xFDFFFFFFFFFFFFFF,0xFEFFFFFFFFFFFFFF,0xFFFFFFFFFFFFFFFF};
    auto table_split_keys = table.add_split_keys();
    for (int i = 0; i < sizeof(split_keys)/sizeof(uint64_t); ++i) {
        MutTableKey key;
        key.append_u64(split_keys[i]);
        //table.add_split_keys(key.data());
        table_split_keys->add_split_keys(key.data());
    }

}

int create_table() {
    MetaServerInteract interact;
    if (interact.init() != 0) {
        DB_WARNING("init fail");
        return -1;
    }
    pb::MetaManagerRequest request;
    request.set_op_type(pb::OP_CREATE_TABLE);
    create_schema(*request.mutable_table_info());
    pb::MetaManagerResponse response;
    if (interact.send_request("meta_manager", request, response) != 0) {
        DB_WARNING("send_request fail");
        return -1;
    }
    DB_WARNING("req:%s  \nres:%s", request.DebugString().c_str(), response.DebugString().c_str());
    if (response.errcode() != pb::SUCCESS) {
        DB_WARNING("err:%s", response.errmsg().c_str());
        return -1;
    }
    return 0;
}

} // namespace baikaldb

int main(int argc, char **argv) {
    google::ParseCommandLineFlags(&argc, &argv, true);

    baikaldb::create_table();
    sleep(30);

    return 0;
}

/* vim: set expandtab ts=4 sw=4 sts=4 tw=100: */
